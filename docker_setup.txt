# Dockerfile
FROM node:18-alpine

# Install system dependencies
RUN apk add --no-cache \
    ffmpeg \
    sox \
    curl \
    bash

# Create app directory
WORKDIR /usr/src/app

# Copy package files
COPY package*.json ./

# Install Node.js dependencies
RUN npm ci --only=production

# Copy application code
COPY . .

# Create necessary directories
RUN mkdir -p temp_audio logs

# Expose ports
EXPOSE 3000 5060/udp

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:3000/health || exit 1

# Start the application
CMD ["npm", "start"]

# ===============================================
# docker-compose.yml
# ===============================================

version: '3.8'

services:
  ai-voice-router:
    build: .
    ports:
      - "3000:3000"
      - "5060:5060/udp"
    environment:
      - NODE_ENV=production
    env_file:
      - .env
    volumes:
      - ./logs:/usr/src/app/logs
      - ./temp_audio:/usr/src/app/temp_audio
    restart: unless-stopped
    depends_on:
      - asterisk
      - redis
    networks:
      - voice-network

  asterisk:
    image: andrius/asterisk:18
    ports:
      - "5061:5060/udp"
      - "8088:8088"
      - "10000-10010:10000-10010/udp"
    volumes:
      - ./asterisk-config:/etc/asterisk
      - ./asterisk-sounds:/var/lib/asterisk/sounds
      - ./asterisk-logs:/var/log/asterisk
    environment:
      - ASTERISK_UID=1000
      - ASTERISK_GID=1000
    restart: unless-stopped
    networks:
      - voice-network

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    restart: unless-stopped
    networks:
      - voice-network

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - ai-voice-router
    restart: unless-stopped
    networks:
      - voice-network

volumes:
  redis-data:

networks:
  voice-network:
    driver: bridge

# ===============================================
# nginx.conf
# ===============================================

events {
    worker_connections 1024;
}

http {
    upstream ai_voice_router {
        server ai-voice-router:3000;
    }

    server {
        listen 80;
        server_name your-domain.com;
        
        location / {
            proxy_pass http://ai_voice_router;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /health {
            proxy_pass http://ai_voice_router/health;
            access_log off;
        }
    }

    # SSL configuration (uncomment when you have certificates)
    # server {
    #     listen 443 ssl;
    #     server_name your-domain.com;
    #     
    #     ssl_certificate /etc/nginx/ssl/cert.pem;
    #     ssl_certificate_key /etc/nginx/ssl/key.pem;
    #     
    #     location / {
    #         proxy_pass http://ai_voice_router;
    #         proxy_set_header Host $host;
    #         proxy_set_header X-Real-IP $remote_addr;
    #         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #         proxy_set_header X-Forwarded-Proto $scheme;
    #     }
    # }
}

# ===============================================
# setup.sh - Installation Script
# ===============================================

#!/bin/bash

echo "Setting up AI Voice Call Router..."

# Check if Node.js is installed
if ! command -v node &> /dev/null; then
    echo "Node.js not found. Please install Node.js 16+ first."
    exit 1
fi

# Check if Docker is installed
if ! command -v docker &> /dev/null; then
    echo "Docker not found. Installing Docker..."
    # Add Docker installation commands for your OS
fi

# Create necessary directories
mkdir -p temp_audio logs asterisk-config asterisk-sounds asterisk-logs ssl

# Copy environment file
if [ ! -f .env ]; then
    cp .env.example .env
    echo "Created .env file. Please update it with your credentials."
fi

# Install Node.js dependencies
echo "Installing Node.js dependencies..."
npm install

# Set up Asterisk configuration
echo "Setting up Asterisk configuration..."
cp asterisk-configs/* asterisk-config/

# Make AGI script executable
chmod +x ai-assistant.agi

# Build Docker images
echo "Building Docker images..."
docker-compose build

echo "Setup complete!"
echo ""
echo "Next steps:"
echo "1. Update .env file with your credentials"
echo "2. Configure your OnSIP account to route calls to this server"
echo "3. Start the application: docker-compose up -d"
echo "4. Monitor logs: docker-compose logs -f"

# ===============================================
# systemd service file (ai-voice-router.service)
# ===============================================

[Unit]
Description=AI Voice Call Router
Documentation=https://github.com/your-repo/ai-voice-router
After=network.target

[Service]
Type=simple
User=nodejs
WorkingDirectory=/opt/ai-voice-router
Environment=NODE_ENV=production
Environment=PATH=/usr/bin:/usr/local/bin
ExecStart=/usr/bin/node app.js
Restart=on-failure
RestartSec=10
StandardOutput=syslog
StandardError=syslog
SyslogIdentifier=ai-voice-router

[Install]
WantedBy=multi-user.target