{"version":3,"sources":["src/common.speech/ServiceMessages/PhraseDetection/SpeakerDiarization.ts"],"names":[],"mappings":";AAAA,EAAE;AACF,gDAAgD;AAChD,wGAAwG;AACxG,EAAE;;;AAEF;;GAEG;AACH,IAAY,sBAIX;AAJD,WAAY,sBAAsB;IAC9B,uCAAa,CAAA;IACb,+CAAqB,CAAA;IACrB,iDAAuB,CAAA;AAC3B,CAAC,EAJW,sBAAsB,GAAtB,8BAAsB,KAAtB,8BAAsB,QAIjC;AAED;;GAEG;AACH,IAAY,gBAEX;AAFD,WAAY,gBAAgB;IACxB,6CAAyB,CAAA;AAC7B,CAAC,EAFW,gBAAgB,GAAhB,wBAAgB,KAAhB,wBAAgB,QAE3B","file":"SpeakerDiarization.js","sourcesContent":["//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.\r\n//\r\n\r\n/**\r\n * The speaker diarization mode\r\n */\r\nexport enum SpeakerDiarizationMode {\r\n    None = \"None\",\r\n    Identity = \"Identity\",\r\n    Anonymous = \"Anonymous\"\r\n}\r\n\r\n/**\r\n * The identity provider\r\n */\r\nexport enum IdentityProvider {\r\n    CallCenter = \"CallCenter\"\r\n}\r\n\r\n/**\r\n * The speaker diarization configuration\r\n */\r\nexport interface SpeakerDiarization {\r\n    /**\r\n     * The mode\r\n     */\r\n    mode?: SpeakerDiarizationMode;\r\n\r\n    /**\r\n     * The identity provider\r\n     */\r\n    identityProvider?: IdentityProvider;\r\n\r\n    /**\r\n     * A token that identifies a diarization session across reconnects\r\n     */\r\n    audioSessionId?: string;\r\n\r\n    /**\r\n     * The audio offset measured in msec to apply to the audio stream in case this is a session reconnect\r\n     */\r\n    audioOffsetMs?: number;\r\n\r\n    /**\r\n     * If set to true the diarization will be performed on the intermediate results\r\n     */\r\n    diarizeIntermediates?: boolean;\r\n}\r\n"]}