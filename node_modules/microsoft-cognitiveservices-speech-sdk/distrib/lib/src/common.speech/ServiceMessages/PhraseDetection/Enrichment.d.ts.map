{"version":3,"sources":["src/common.speech/ServiceMessages/PhraseDetection/Enrichment.ts"],"names":[],"mappings":"AAKA,OAAO,EAAE,8BAA8B,EAAE,MAAM,sDAAsD,CAAC;AACtG,OAAO,EAAE,4BAA4B,EAAE,MAAM,gCAAgC,CAAC;AAC9E,OAAO,EAAE,0BAA0B,EAAE,MAAM,8BAA8B,CAAC;AAC1E,OAAO,EAAE,6BAA6B,EAAE,MAAM,iCAAiC,CAAC;AAChF,OAAO,EAAE,wBAAwB,EAAE,MAAM,4BAA4B,CAAC;AACtE,OAAO,EAAE,uBAAuB,EAAE,MAAM,2BAA2B,CAAC;AAEpE;;GAEG;AACH,oBAAY,qBAAqB;IAC7B;;OAEG;IACH,MAAM,WAAW;IAEjB;;OAEG;IACH,OAAO,YAAY;IAEnB;;OAEG;IACH,GAAG,QAAQ;IAEX;;OAEG;IACH,MAAM,WAAW;IAEjB;;OAEG;IACH,OAAO,YAAY;CACtB;AAED;;GAEG;AACH,oBAAY,kBAAkB;IAC1B;;OAEG;IACH,OAAO,YAAY;IAEnB;;OAEG;IACH,QAAQ,aAAa;CACxB;AAED;;GAEG;AACH,MAAM,WAAW,UAAU;IACvB;;OAEG;IACH,WAAW,CAAC,EAAE,4BAA4B,CAAC;IAE3C;;OAEG;IACH,SAAS,CAAC,EAAE,0BAA0B,CAAC;IAEvC;;OAEG;IACH,YAAY,CAAC,EAAE,6BAA6B,CAAC;IAE7C;;OAEG;IACH,uBAAuB,CAAC,EAAE,8BAA8B,CAAC;IAEzD;;OAEG;IACH,iBAAiB,CAAC,EAAE,wBAAwB,CAAC;IAE7C;;OAEG;IACH,wBAAwB,CAAC,EAAE,OAAO,CAAC;IAEnC;;OAEG;IACH,SAAS,CAAC,EAAE,qBAAqB,CAAC;IAElC;;OAEG;IACH,cAAc,CAAC,EAAE,kBAAkB,CAAC;IAEpC;;OAEG;IACH,eAAe,CAAC,EAAE,MAAM,CAAC;IAEzB;;OAEG;IACH,aAAa,CAAC,EAAE,MAAM,CAAC;IAEvB;;OAEG;IACH,mBAAmB,CAAC,EAAE,uBAAuB,CAAC;CACjD","file":"Enrichment.d.ts","sourcesContent":["//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.\r\n//\r\n\r\nimport { PronunciationAssessmentOptions } from \"../PronunciationScore/PronunciationAssessmentOptions\";\r\nimport { InteractiveEnrichmentOptions } from \"./InteractiveEnrichmentOptions\";\r\nimport { DictationEnrichmentOptions } from \"./DictationEnrichmentOptions\";\r\nimport { ConversationEnrichmentOptions } from \"./ConversationEnrichmentOptions\";\r\nimport { ContentAssessmentOptions } from \"./ContentAssessmentOptions\";\r\nimport { SecondPassRescoringMode } from \"./SecondPassRescoringMode\";\r\n\r\n/**\r\n * Profanity handling options.\r\n */\r\nexport enum ProfanityHandlingMode {\r\n    /**\r\n     * This is the default behavior. The Microsoft Speech Service masks profanity with asterisks.\r\n     */\r\n    Masked = \"Masked\",\r\n\r\n    /**\r\n     * The Microsoft Speech Service removes profanity from all results.\r\n     */\r\n    Removed = \"Removed\",\r\n\r\n    /**\r\n     * The Microsoft Speech Service recognizes and returns profanity in all results.\r\n     */\r\n    Raw = \"Raw\",\r\n\r\n    /**\r\n     * The Microsoft Speech Service will surround profane words by XML tags &lt;profanity&gt; ... &lt;/profanity&gt;\r\n     */\r\n    Tagged = \"Tagged\",\r\n\r\n    /**\r\n     * The Microsoft Speech Service will add profanity label to the Words\r\n     */\r\n    Labeled = \"Labeled\"\r\n}\r\n\r\n/**\r\n * The capitalization mode\r\n */\r\nexport enum CapitalizationMode {\r\n    /**\r\n     * Enable capitalization\r\n     */\r\n    Enabled = \"Enabled\",\r\n\r\n    /**\r\n     * Disable capitalization\r\n     */\r\n    Disabled = \"Disabled\"\r\n}\r\n\r\n/**\r\n * Defines the phrase detection payload in the speech Context message\r\n */\r\nexport interface Enrichment {\r\n    /**\r\n     * The interactive enrichment options.\r\n     */\r\n    interactive?: InteractiveEnrichmentOptions;\r\n\r\n    /**\r\n     * The dictation enrichment options.\r\n     */\r\n    dictation?: DictationEnrichmentOptions;\r\n\r\n    /**\r\n     * The conversation enrichment options.\r\n     */\r\n    conversation?: ConversationEnrichmentOptions;\r\n\r\n    /**\r\n     * The pronunciation assessment options.\r\n     */\r\n    pronunciationAssessment?: PronunciationAssessmentOptions;\r\n\r\n    /**\r\n     * The content assessment options.\r\n     */\r\n    contentAssessment?: ContentAssessmentOptions;\r\n\r\n    /**\r\n     * If true, strips the startTriggerKeyword from the phrase reco result\r\n     */\r\n    stripStartTriggerKeyword?: boolean;\r\n\r\n    /**\r\n     * The profanity handling mode.\r\n     */\r\n    profanity?: ProfanityHandlingMode;\r\n\r\n    /**\r\n     * The capitalization mode.\r\n     */\r\n    capitalization?: CapitalizationMode;\r\n\r\n    /**\r\n     * The interim template\r\n     */\r\n    interimTemplate?: string;\r\n\r\n    /**\r\n     * The final template\r\n     */\r\n    finalTemplate?: string;\r\n\r\n    /**\r\n     * The second pass rescoring mode.\r\n     */\r\n    secondPassRescoring?: SecondPassRescoringMode;\r\n}\r\n"]}