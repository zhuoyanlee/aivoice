{"version":3,"sources":["src/common.speech/ServiceMessages/TranslationHypothesis.ts"],"names":[],"mappings":";AAAA,4DAA4D;AAC5D,kCAAkC;;;AAElC,yDAAmD;AAEnD,kEAA4D;AAW5D,MAAa,qBAAqB;IAG9B,YAAoB,UAAkC,EAAE,UAAkB;QACtE,IAAI,CAAC,yBAAyB,GAAG,UAAU,CAAC;QAC5C,IAAI,CAAC,yBAAyB,CAAC,MAAM,IAAI,UAAU,CAAC;QACpD,IAAI,CAAC,yBAAyB,CAAC,WAAW,CAAC,iBAAiB,GAAG,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,yBAAyB,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC;IAC3J,CAAC;IAEM,MAAM,CAAC,QAAQ,CAAC,IAAY,EAAE,UAAkB;QACnD,OAAO,IAAI,qBAAqB,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAA2B,EAAE,UAAU,CAAC,CAAC;IAC7F,CAAC;IAEM,MAAM,CAAC,uBAAuB,CAAC,qBAAmE,EAAE,UAAkB;QACzH,wBAAS,CAAC,sBAAsB,CAAC,qBAAqB,EAAE,uBAAuB,CAAC,CAAC;QACjF,MAAM,UAAU,GAA2B,qBAAqB,CAAC,gBAAgB,CAAC;QAClF,qBAAqB,CAAC,gBAAgB,GAAG,SAAS,CAAC;QACnD,UAAU,CAAC,WAAW,GAAI,qBAAkD,CAAC;QAC7E,OAAO,IAAI,qBAAqB,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC;IAC7D,CAAC;IAED,IAAW,QAAQ;QACf,OAAO,IAAI,CAAC,yBAAyB,CAAC,QAAQ,CAAC;IACnD,CAAC;IAED,IAAW,MAAM;QACb,OAAO,IAAI,CAAC,yBAAyB,CAAC,MAAM,CAAC;IACjD,CAAC;IAED,IAAW,IAAI;QACX,OAAO,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC;IAC/C,CAAC;IAED,IAAW,WAAW;QAClB,OAAO,IAAI,CAAC,yBAAyB,CAAC,WAAW,CAAC;IACtD,CAAC;IAED,IAAW,QAAQ;QACf,OAAO,IAAI,CAAC,yBAAyB,CAAC,eAAe,EAAE,QAAQ,CAAC;IACpE,CAAC;IAEM,MAAM;QACT,MAAM,OAAO,GAAG,EAAE,GAAG,IAAI,CAAC,yBAAyB,EAAE,CAAC;QACtD,kFAAkF;QAElF,OAAO,OAAO,CAAC,WAAW,KAAK,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC;YACtD,GAAG,OAAO;YACV,iBAAiB,EAAE,wCAAiB,CAAC,OAAO,CAAC,WAAW,CAAC,iBAAiB,CAAmC;SAChH,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;IACjC,CAAC;IAEO,oBAAoB,CAAC,MAAW;QACpC,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE;YAC5B,OAAO,wCAAiB,CAAC,MAAwC,CAAC,CAAC;SACtE;aAAM,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE;YACnC,OAAO,MAAM,CAAC;SACjB;IACL,CAAC;CACJ;AA1DD,sDA0DC","file":"TranslationHypothesis.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"../../sdk/Contracts.js\";\r\nimport { IPrimaryLanguage, ITranslations } from \"../Exports.js\";\r\nimport { TranslationStatus } from \"../TranslationStatus.js\";\r\n\r\n// translation.hypothesis\r\nexport interface ITranslationHypothesis {\r\n    Duration: number;\r\n    Offset: number;\r\n    PrimaryLanguage?: IPrimaryLanguage;\r\n    Text: string;\r\n    Translation: ITranslations;\r\n}\r\n\r\nexport class TranslationHypothesis implements ITranslationHypothesis {\r\n    private privTranslationHypothesis: ITranslationHypothesis;\r\n\r\n    private constructor(hypothesis: ITranslationHypothesis, baseOffset: number) {\r\n        this.privTranslationHypothesis = hypothesis;\r\n        this.privTranslationHypothesis.Offset += baseOffset;\r\n        this.privTranslationHypothesis.Translation.TranslationStatus = this.mapTranslationStatus(this.privTranslationHypothesis.Translation.TranslationStatus);\r\n    }\r\n\r\n    public static fromJSON(json: string, baseOffset: number): TranslationHypothesis {\r\n        return new TranslationHypothesis(JSON.parse(json) as ITranslationHypothesis, baseOffset);\r\n    }\r\n\r\n    public static fromTranslationResponse(translationHypothesis: { SpeechHypothesis: ITranslationHypothesis }, baseOffset: number): TranslationHypothesis {\r\n        Contracts.throwIfNullOrUndefined(translationHypothesis, \"translationHypothesis\");\r\n        const hypothesis: ITranslationHypothesis = translationHypothesis.SpeechHypothesis;\r\n        translationHypothesis.SpeechHypothesis = undefined;\r\n        hypothesis.Translation = (translationHypothesis as unknown as ITranslations);\r\n        return new TranslationHypothesis(hypothesis, baseOffset);\r\n    }\r\n\r\n    public get Duration(): number {\r\n        return this.privTranslationHypothesis.Duration;\r\n    }\r\n\r\n    public get Offset(): number {\r\n        return this.privTranslationHypothesis.Offset;\r\n    }\r\n\r\n    public get Text(): string {\r\n        return this.privTranslationHypothesis.Text;\r\n    }\r\n\r\n    public get Translation(): ITranslations {\r\n        return this.privTranslationHypothesis.Translation;\r\n    }\r\n\r\n    public get Language(): string {\r\n        return this.privTranslationHypothesis.PrimaryLanguage?.Language;\r\n    }\r\n\r\n    public asJson(): string {\r\n        const jsonObj = { ...this.privTranslationHypothesis };\r\n        // Convert the enum value to its string representation for serialization purposes.\r\n\r\n        return jsonObj.Translation !== undefined ? JSON.stringify({\r\n            ...jsonObj,\r\n            TranslationStatus: TranslationStatus[jsonObj.Translation.TranslationStatus] as keyof typeof TranslationStatus\r\n        }) : JSON.stringify(jsonObj);\r\n    }\r\n\r\n    private mapTranslationStatus(status: any): TranslationStatus {\r\n        if (typeof status === \"string\") {\r\n            return TranslationStatus[status as keyof typeof TranslationStatus];\r\n        } else if (typeof status === \"number\") {\r\n            return status;\r\n        }\r\n    }\r\n}\r\n"]}