{"version":3,"sources":["src/common.speech/ServiceMessages/DetailedSpeechPhrase.ts"],"names":[],"mappings":"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","file":"DetailedSpeechPhrase.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IPrimaryLanguage, RecognitionStatus } from \"../Exports.js\";\r\n\r\n// speech.phrase for detailed\r\nexport interface IDetailedSpeechPhrase {\r\n    RecognitionStatus: RecognitionStatus;\r\n    NBest: IPhrase[];\r\n    Duration?: number;\r\n    Offset?: number;\r\n    PrimaryLanguage?: IPrimaryLanguage;\r\n    DisplayText?: string;\r\n    SpeakerId?: string;\r\n    [key: string]: any;\r\n}\r\n\r\nexport interface IPhrase {\r\n    Confidence?: number;\r\n    Lexical: string;\r\n    ITN: string;\r\n    MaskedITN: string;\r\n    Display?: string;\r\n    DisplayText?: string;\r\n    Words?: IWord[];\r\n    DisplayWords?: IWord[];\r\n}\r\n\r\nexport interface IWord {\r\n    Word: string;\r\n    Offset: number;\r\n    Duration: number;\r\n}\r\n\r\nexport class DetailedSpeechPhrase implements IDetailedSpeechPhrase {\r\n    private privDetailedSpeechPhrase: IDetailedSpeechPhrase;\r\n\r\n    private constructor(json: string, baseOffset: number) {\r\n        this.privDetailedSpeechPhrase = JSON.parse(json) as IDetailedSpeechPhrase;\r\n        this.privDetailedSpeechPhrase.RecognitionStatus = this.mapRecognitionStatus(this.privDetailedSpeechPhrase.RecognitionStatus);\r\n        this.updateOffsets(baseOffset);\r\n    }\r\n\r\n    public static fromJSON(json: string, baseOffset: number): DetailedSpeechPhrase {\r\n        return new DetailedSpeechPhrase(json, baseOffset);\r\n    }\r\n\r\n    private updateOffsets(baseOffset: number): void {\r\n        this.privDetailedSpeechPhrase.Offset += baseOffset;\r\n\r\n        if (!!this.privDetailedSpeechPhrase.NBest) {\r\n            for (const phrase of this.privDetailedSpeechPhrase.NBest) {\r\n                if (!!phrase.Words) {\r\n                    for (const word of phrase.Words) {\r\n                        word.Offset += baseOffset;\r\n                    }\r\n                }\r\n                if (!!phrase.DisplayWords) {\r\n                    for (const word of phrase.DisplayWords) {\r\n                        word.Offset += baseOffset;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public asJson(): string {\r\n        const jsonObj = { ...this.privDetailedSpeechPhrase };\r\n        // Convert the enum value to its string representation for serialization purposes.\r\n        return JSON.stringify({\r\n            ...jsonObj,\r\n            RecognitionStatus: RecognitionStatus[jsonObj.RecognitionStatus] as keyof typeof RecognitionStatus\r\n        });\r\n    }\r\n\r\n    public get RecognitionStatus(): RecognitionStatus {\r\n        return this.privDetailedSpeechPhrase.RecognitionStatus;\r\n    }\r\n    public get NBest(): IPhrase[] {\r\n        return this.privDetailedSpeechPhrase.NBest;\r\n    }\r\n    public get Duration(): number {\r\n        return this.privDetailedSpeechPhrase.Duration;\r\n    }\r\n    public get Offset(): number {\r\n        return this.privDetailedSpeechPhrase.Offset;\r\n    }\r\n    public get Language(): string {\r\n        return this.privDetailedSpeechPhrase.PrimaryLanguage === undefined ? undefined : this.privDetailedSpeechPhrase.PrimaryLanguage.Language;\r\n    }\r\n    public get LanguageDetectionConfidence(): string {\r\n        return this.privDetailedSpeechPhrase.PrimaryLanguage === undefined ? undefined : this.privDetailedSpeechPhrase.PrimaryLanguage.Confidence;\r\n    }\r\n    public get Text(): string {\r\n        if (!!this.privDetailedSpeechPhrase.NBest && this.privDetailedSpeechPhrase.NBest[0]) {\r\n            return this.privDetailedSpeechPhrase.NBest[0].Display || this.privDetailedSpeechPhrase.NBest[0].DisplayText;\r\n        }\r\n        return this.privDetailedSpeechPhrase.DisplayText;\r\n    }\r\n    public get SpeakerId(): string {\r\n        return this.privDetailedSpeechPhrase.SpeakerId;\r\n    }\r\n    private mapRecognitionStatus(status: any): RecognitionStatus {\r\n        if (typeof status === \"string\") {\r\n            return RecognitionStatus[status as keyof typeof RecognitionStatus];\r\n        } else if (typeof status === \"number\") {\r\n            return status;\r\n        }\r\n    }\r\n}\r\n"]}